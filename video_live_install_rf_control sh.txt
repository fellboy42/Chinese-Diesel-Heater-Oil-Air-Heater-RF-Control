##################################################################################
https://github.com/fellboy42/Chinese-Diesel-Heater-Oil-Air-Heater-RF-Control
####################################################################
Create a new script file named install_rf_control.sh by running:

bash
Copy code
sudo nano install_rf_control.sh
Paste the Script
Copy and paste the following code into the nano editor:

################################################################################


#!/bin/bash

# Update system packages
echo "Updating system packages..."
sudo apt update && sudo apt upgrade -y

# Install necessary packages
echo "Installing dependencies..."
sudo apt install -y python3 python3-pip python3-picamera2 python3-opencv

# Install Python libraries
echo "Installing Python libraries..."
sudo pip3 install rpi-rf Flask --break-system-packages

# Create application directory
APP_DIR="/home/steve/rf_control_app"
if [ ! -d "$APP_DIR" ]; then
    echo "Creating application directory..."
    sudo mkdir -p $APP_DIR
fi

# Create rf_sender.py
echo "Creating rf_sender.py..."
sudo tee $APP_DIR/rf_sender.py > /dev/null << 'EOF'
#!/usr/bin/env python3
import argparse
import logging
from rpi_rf import RFDevice

logging.basicConfig(level=logging.INFO, datefmt='%Y-%m-%d %H:%M:%S',
                    format='%(asctime)-15s - [%(levelname)s] %(module)s: %(message)s')

parser = argparse.ArgumentParser(description='Sends decimal codes via a 433/315MHz GPIO device')
parser.add_argument('code', metavar='CODE', type=int, help="First decimal code to send")
parser.add_argument('-g', dest='gpio', type=int, default=17, help="GPIO pin (Default: 17)")
parser.add_argument('-p', dest='pulselength', type=int, default=350, help="Pulselength (Default: 350)")
parser.add_argument('-t', dest='protocol', type=int, default=1, help="Protocol (Default: 1)")
parser.add_argument('-l', dest='length', type=int, default=32, help="Codelength (Default: 32)")
parser.add_argument('-r', dest='repeat', type=int, default=10, help="Repeat cycles (Default: 4)")
args = parser.parse_args()

try:
    rfdevice = RFDevice(args.gpio)
    rfdevice.enable_tx()
    rfdevice.tx_repeat = args.repeat
    logging.info(f"Sending code {args.code} with protocol {args.protocol}, pulselength {args.pulselength}, length {args.length}")
    rfdevice.tx_code(args.code, args.protocol, args.pulselength, args.length)
except Exception as e:
    logging.error(f"Failed to send RF code: {e}")
finally:
    if 'rfdevice' in locals():
        rfdevice.cleanup()
EOF

# Make rf_sender.py executable
sudo chmod +x $APP_DIR/rf_sender.py

# Create app.py with Flask and video stream
echo "Creating app.py..."
sudo tee $APP_DIR/app.py > /dev/null << 'EOF'
from flask import Flask, request, jsonify, Response, send_from_directory
import subprocess
from picamera2 import Picamera2
import io
import os
import logging

app = Flask(__name__)
GPIO_PIN = int(os.getenv("RF_GPIO_PIN", 17))
commands = {
    "on": "151196080",
    "off": "151192840",
    "up": "151193840",
    "down": "151192200"
}

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
camera = Picamera2()
camera.start()

def generate_frames():
    try:
        while True:
            stream = io.BytesIO()
            camera.capture_file(stream, format="jpeg")
            stream.seek(0)
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + stream.read() + b'\r\n')
    except Exception as e:
        logging.error("Camera error: %s", e)
        yield (b'--frame\r\n'
               b'Content-Type: text/plain\r\n\r\n'
               b"Camera unavailable\r\n")

@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

@app.route('/execute')
def execute():
    command = request.args.get('command')
    if command not in commands:
        logging.warning("Unknown command received: %s", command)
        return jsonify({"error": "Unknown command."}), 400

    try:
        logging.info("Executing command: %s", command)
        subprocess.run(
            ['python3', 'rf_sender.py', str(commands[command]), '-g', str(GPIO_PIN), '-p', '350', '-t', '1', '-l', '32', '-r', '4'],
            cwd='/home/steve/rf_control_app',
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True
        )
        logging.info("Successfully executed command: %s", command)
        return jsonify({"success": f"Executed command: {command}"}), 200
    except subprocess.CalledProcessError as e:
        logging.error("RF command failed: %s", e)
        return jsonify({"error": "Failed to execute command."}), 500

@app.route('/video_feed')
def video_feed():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
EOF

# Create index.html for frontend interface
echo "Creating index.html..."
sudo tee $APP_DIR/index.html > /dev/null << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oil Heater Control</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        
        .container {
            max-width: 500px;
            width: 90%;
            margin: auto;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        button {
            margin-top: 10px;
            padding: 10px 20px;
            width: 100%;
            font-size: 16px;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            color: white;
        }

        .on-button { background-color: gray; }
        .off-button { background-color: gray; }
        .up-button { background-color: #007bff; }
        .down-button { background-color: #007bff; }
        
        .on-active { background-color: #28a745; }
        .off-active { background-color: #dc3545; }

        #message {
            margin-top: 20px;
            font-size: 18px;
        }

        #videoStream {
            margin-top: 20px;
            width: 100%;
            max-width: 500px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Oil Air Heater RF Control</h1>
        <button id="onBtn" class="on-button" onclick="sendCommand('on')">Turn On</button>
        <button id="offBtn" class="off-button" onclick="sendCommand('off')">Turn Off</button>
        <button class="up-button" onclick="sendCommand('up')">Increase</button>
        <button class="down-button" onclick="sendCommand('down')">Decrease</button>

        <div id="message"></div>
        <h2>Live Video Feed</h2>
        <img id="videoStream" src="/video_feed" alt="Live Video Stream">
    </div>

    <script>
        function updateButtonState(command) {
            const onBtn = document.getElementById('onBtn');
            const offBtn = document.getElementById('offBtn');

            if (command === 'on') {
                onBtn.classList.add('on-active');
                offBtn.classList.remove('off-active');
            } else if (command === 'off') {
                onBtn.classList.remove('on-active');
                offBtn.classList.add('off-active');
            }
        }

        function sendCommand(command) {
            const confirmation = confirm(`Are you sure you want to ${command}?`);
            if (!confirmation) return;

            const messageElement = document.getElementById('message');
            fetch(`/execute?command=${command}`)
                .then(response => response.json())
                .then(data => {
                    messageElement.innerText = data.success ? "Success" : "Error: " + data.error;
                    if (data.success) updateButtonState(command);
                })
                .catch(error => {
                    messageElement.innerText = 'Error: ' + error;
                });
        }
    </script>
</body>
</html>
EOF

# Set up systemd service
echo "Setting up systemd service..."
sudo tee /etc/systemd/system/rf_control_app.service > /dev/null << EOF
[Unit]
Description=RF Control Flask Application
After=network.target

[Service]
ExecStart=/usr/bin/python3 $APP_DIR/app.py
WorkingDirectory=$APP_DIR
StandardOutput=inherit
StandardError=inherit
Restart=always
User=steve
Environment=PYTHONUNBUFFERED=1
Environment="RF_GPIO_PIN=17"

[Install]
WantedBy=multi-user.target
EOF

# Enable and start the service
sudo systemctl daemon-reload
sudo systemctl enable rf_control_app.service
sudo systemctl start rf_control_app.service

echo "Installation complete. You can access the web interface at http://<your_pi_ip>:5000"

################################################################################################

Save and Close
Save the script in nano by pressing Ctrl + X, then Y, and Enter.

Run the Script
Make the script executable and execute it:

bash
Copy code
sudo chmod +x install_rf_control.sh
./install_rf_control.sh
sudo apt update && sudo apt upgrade -y
This complete script will install dependencies, set up the application files, configure the Flask app and RF code, and start the service, making it accessible from the specified IP address on port 5000. Let me know if you encounter any issues during setup!






